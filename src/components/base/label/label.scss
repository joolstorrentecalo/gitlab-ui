$label-max-width: 100%;
$label-close-button: '.gl-label-close.gl-button';
$label-padding-horizontal: 0.75 * $grid-size;
$label-padding-horizontal-half: 0.375 * $grid-size;

.gl-label {
  @include gl-align-items-center;
  background-color: var(--gl-background-color-default);
  @include gl-overflow-hidden;
  @include gl-display-inline-flex;
  @include gl-rounded-pill;
  position: relative;
  @include gl-max-w-full;
  @include gl-font-sm;
  @include gl-line-height-normal;
  box-shadow: inset 0 0 0 2px var(--label-background-color);

  .gl-dark & {
    box-shadow: unquote("inset 0 0 0 1px rgb(from lch(from var(--label-color) calc(l * 10) c h) r g b / 24%)");
  }

  @media (forced-colors: active) {
    border: 1px solid; // stylelint-disable-line declaration-property-value-disallowed-list
  }

  &:not(.gl-label-scoped) {
    background-color: var(--label-background-color);

    .gl-dark & {
      background-color: unquote("rgb(from var(--label-background-color) r g b / 30%)");
    }
  }

  &:has(*:first-child:focus) {
    @include gl-focus($color: var(--label-background-color, var(--gl-background-color-default)), $important: true);
  }

  .gl-label-link {
    @include gl-display-flex;
    @include gl-font-weight-normal;
    @include gl-overflow-hidden;
    @include gl-reset-color;
    @include gl-max-w-full;

    &:hover,
    &:focus,
    &:focus:active {
      @include gl-reset-color;
      @include gl-shadow-none;
      @include gl-outline-none;
    }
  }

  .gl-label-link-underline {
    text-decoration: none;

    &:hover,
    &:focus,
    &:focus:active {
      .gl-label-text,
      .gl-label-text-scoped {
        text-decoration: underline;
      }
    }
  }

  .gl-label-text {
    .gl-dark & {
      color: unquote("rgb(from lch(from var(--label-color) calc(l * 10) c h) r g b / 75%)");
    }
  }

  .gl-label-text,
  .gl-label-text-scoped {
    @include gl-display-block;
    padding: $gl-spacing-scale-1 $label-padding-horizontal;
    @include str-truncated($label-max-width);
  }

  &:not(.gl-label-scoped):has(.gl-icon) {
    @apply gl-pr-5;
  }

  &.gl-label-scoped:has(.gl-icon) .gl-label-text-scoped {
    padding-right: #{$gl-spacing-scale-5 + $gl-spacing-scale-2};
  }

  > #{$label-close-button} {
    @apply gl-border-0;
    @include gl-display-flex;
    width: px-to-rem(14px);
    height: px-to-rem(14px);
    position: absolute;
    right: $label-padding-horizontal-half;
    @include gl-p-0;
    @include gl-rounded-full;
    @include gl-shadow-none;

    &:focus,
    &:active {
      @include gl-focus;
    }

    .gl-icon {
      vertical-align: -1px;
    }
  }
}

// styles for the the light label variant (which uses dark text)
.gl-label-text-dark {
  color: var(--gl-label-light-text-color);

  #{$label-close-button} {
    color: var(--gl-label-light-button-icon-color-default);
    background-color: var(--gl-label-light-button-background-color-default);

    &:focus,
    &:hover {
      color: var(--label-background-color);
      background-color: var(--gl-label-light-button-background-color-hover);
    }
  }
}

// styles for the the dark label variant (which uses light text)
.gl-label-text-light {
  color: var(--gl-label-dark-text-color);

  #{$label-close-button} {
    color: var(--gl-label-dark-button-icon-color-default);
    background-color: var(--gl-label-dark-button-background-color-default);

    &:focus,
    &:hover {
      color: var(--label-background-color);
      background-color: var(--gl-label-dark-button-background-color-hover);
    }
  }
}

// darkmode overrides
.gl-dark .gl-label-text-light,
.gl-dark .gl-label-text-dark {
  #{$label-close-button} {
    color: var(--gl-icon-color-default);

    &:focus,
    &:hover {
      color: var(--gl-label-light-text-color);
      background-color: var(--gl-label-dark-button-background-color-hover);
    }
  }
}

.gl-label-scoped {
  #{$label-close-button} {
    margin-left: #{-$label-padding-horizontal};
    color: var(--gl-label-scoped-button-icon-color-default);

    &:focus,
    &:hover {
      color: var(--gl-label-scoped-button-icon-color-hover);
      background-color: var(--gl-label-scoped-button-background-color-hover);
    }
  }

  .gl-label-text {
    background-color: var(--label-background-color);

    .gl-dark & {
      background-color: unquote("rgb(from lch(from var(--label-background-color) calc(l * 10) c h) r g b / 24%)");
    }

    @media (forced-colors: active) {
      border-right: 1px solid CanvasText;
    }
  }

  .gl-label-text-scoped {
    color: var(--gl-label-scoped-text-color);
    padding-left: $gl-spacing-scale-2;
    padding-right: $gl-spacing-scale-3;

    .gl-dark & {
      opacity: 0.8;
      border-top-right-radius: 0.625rem;
      border-bottom-right-radius: 0.625rem;
      box-shadow: unquote("inset -1px 0 0 0 rgb(from lch(from var(--label-background-color) calc(l * 10) c h) r g b / 24%), inset 0 -1px 0 0 rgb(from lch(from var(--label-background-color) calc(l * 10) c h) r g b / 24%), inset 0 1px 0 0 rgb(from lch(from var(--label-background-color) calc(l * 10) c h) r g b / 24%)");
    }
  }
}

.gl-label-tooltip-title {
  @include gl-display-block;
  @include gl-text-theme-indigo-300;
  @include gl-font-weight-bold;
}
